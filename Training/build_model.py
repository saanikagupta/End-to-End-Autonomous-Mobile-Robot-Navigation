# -*- coding: utf-8 -*-
"""Build Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t6DD2JA_-C1kZhDsGhpKPJnuVXIQLnpG
"""

import tensorflow as tf
tf.logging.set_verbosity(tf.logging.ERROR)

"""# Building Model"""

import numpy as np
from keras import layers, models, utils, initializers

def MyModel(input_shape_X, input_shape_Goal):
    
    # Three class classification
    num_classes = 3

    # Define the input as a tensor with shape 
    X_input = layers.Input(shape = input_shape_X)
    Goal_input = layers.Input(shape = input_shape_Goal)
    
    X = layers.Conv1D(64, 7, strides = 3, padding = 'valid', kernel_initializer = initializers.glorot_uniform(seed = 0))(X_input)
    X = layers.BatchNormalization()(X)
    X = layers.ReLU()(X)
    
    X = layers.MaxPooling1D(3)(X)
    
    # For shortcut connection
    X_shortcut = X
    
    X = layers.Conv1D(64, 3, strides = 1, padding = 'same', kernel_initializer = initializers.glorot_uniform(seed = 0))(X)
    X = layers.BatchNormalization()(X)
    X = layers.ReLU()(X)
    
    X = layers.Conv1D(64, 3, strides = 1, padding = 'same', kernel_initializer = initializers.glorot_uniform(seed = 0))(X)
    X = layers.BatchNormalization()(X)
    
    # For shortcut connection
    X_shortcut_2 = X 
    
    # Add shortcut value to main path, and pass it through a RELU activation
    X = layers.Add()([X_shortcut, X])
    X = layers.ReLU()(X)
    
    X = layers.Conv1D(64, 3, strides = 1, padding = 'same', kernel_initializer = initializers.glorot_uniform(seed = 0))(X)
    X = layers.BatchNormalization()(X)
    X = layers.ReLU()(X)
    
    X = layers.Conv1D(64, 3, strides = 1, padding = 'same', kernel_initializer = initializers.glorot_uniform(seed = 0))(X)
    X = layers.BatchNormalization()(X)
    
    # Add shortcut value to main path, and pass it through a RELU activation
    X = layers.Add()([X_shortcut_2, X])
    X = layers.ReLU()(X)
    
    X = layers.AveragePooling1D(pool_size = 3, strides = None, padding = 'valid')(X)
    
    # Concatinating the output from CNN and the input goal information
    X = layers.Flatten()(X)
    X = layers.merge.Concatenate()([X, Goal_input])
    
    # FC layers
    X = layers.Dense(1024, activation = 'relu', kernel_initializer = initializers.glorot_uniform(seed = 0))(X)    
    X = layers.Dropout(rate = 0.75)(X) # Applying Dropout
    X = layers.Dense(1024, activation = 'relu', kernel_initializer = initializers.glorot_uniform(seed = 0))(X)
    X = layers.Dropout(rate = 0.65)(X) # Applying Dropout
    X = layers.Dense(512, activation = 'linear', kernel_initializer = initializers.glorot_uniform(seed = 0))(X)
    X = layers.Dropout(rate = 0.5)(X) # Applying Dropout
    X = layers.Dense(num_classes, activation = 'softmax', kernel_initializer = initializers.glorot_uniform(seed = 0))(X)
    
    # Create model
    model = models.Model(name = 'MyModel', input = [X_input, Goal_input], output = X)

    return model
